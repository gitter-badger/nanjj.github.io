#+TITLE: Netmap Learning
#+Date: <2017-11-07 Tue>
#+LINK: pcap  http://yuba.stanford.edu/~casado/pcap/section1.html
#+LINK: stack-receiving https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/
#+LINK: warpcore https://github.com/NTAP/warpcore
#+LINK: netstack https://github.com/google/netstack
#+LINK: netmap-page http://info.iet.unipi.it/~luigi/netmap
#+LINK: netmap-github https://github.com/luigirizzo/netmap
#+LINK: netmap-tutorial https://github.com/vmaffione/netmap-tutorial
#+LINK: netmap-framework http://queue.acm.org/detail.cfm?id=2103536
#+LINK: rizzo https://www.usenix.org/conference/atc12/technical-sessions/presentation/rizzo
#+LINK: atc12-final186.pdf https://www.usenix.org/system/files/conference/atc12/atc12-final186.pdf
#+LINK: netmapinetd https://github.com/nanjj/netmapinetd

[[netmap-page:][Netmap]] is a framework for very fast packet I/O from userspace.

* Netmap Vale Behavior
  Netmap vale is a high performance switch. It learns MAC addresses
  from ether source header. Ether header format:
  #+BEGIN_SRC artist
    +---------------------------------+
    | Destination | Source  | Type    |
    | 6 Bytes     | 6 Bytes | 2 Bytes |
    +---------------------------------+
  #+END_SRC

  There are 3 Types of MAC address:
  1. Broadcast
     
     The only one: =ff:ff:ff:ff:ff:ff=
  2. Multicast

     like =?x:??:??:??:??:??=, here x=1,3,5,7,9,b,d,f
  3. Unicast

     like =?x:??:??:??:??:??=, here x=0,2,4,6,8,a,c,e
  
  Vale switch forwards packets to all ports(except the one to send the
  packets) if the destination MAC address is type of:
  1. Broadcast,
  2. Multicast,
  3. Unicast but the mac addresses is not in the vale switch or is not
     learned by the vale switch.
  
  If the destination MAC address is unicast type and the MAC address
  is learned by value, vale forwards packets to the port with the mac
  address.
** Mac Address Learning
*** Prepare Vale
    #+BEGIN_SRC sh
      vale-ctl -n vi0
      vale-ctl -n vi1
      vale-ctl -n vi2
      vale-ctl -a vale0:vi0
      vale-ctl -a vale0:vi1
      vale-ctl -a vale0:vi2
    #+END_SRC

*** Show Mac Addresses

    #+BEGIN_EXAMPLE
      ip link #=>
      65742: vi0: <BROADCAST,MULTICAST> mtu 1500 qdisc ...
          link/ether 52:ec:30:31:bd:6c brd ff:ff:ff:ff:ff:ff
      65743: vi1: <BROADCAST,MULTICAST> mtu 1500 qdisc ...
          link/ether b6:07:df:ed:04:86 brd ff:ff:ff:ff:ff:ff
      65744: vi2: <BROADCAST,MULTICAST> mtu 1500 qdisc ...
          link/ether 42:d2:0e:93:c8:1b brd ff:ff:ff:ff:ff:ff
    #+END_EXAMPLE
    Please notic vale does not respect the mac addresses of =ip link=
    show.
*** Train Vale

    Vale learns mac address from ether source header, so train it like
    below:
    #+BEGIN_SRC sh
      pkt-gen -i vale0:vi0 -S 52:ec:30:31:bd:6c -f tx
      pkt-gen -i vale0:vi1 -S b6:07:df:ed:04:86 -f tx
      pkt-gen -i vale0:vi2 -S 42:d2:0e:93:c8:1b -f tx
    #+END_SRC

*** Send Packets

    Send packages from =vi0= to =vi1=:
    #+BEGIN_SRC sh
    pkt-gen -i vale0:vi0 -S 52:ec:30:31:bd:6c -D b6:07:df:ed:04:86 -f tx
    #+END_SRC

    =vi1= should receive the packets:
    #+BEGIN_SRC sh
    pkt-gen -i vale0:vi1 -f rx
    #+END_SRC

    =vi2= should not receive the packets:
    #+BEGIN_SRC sh
    pkt-gen -i vale0:vi2 -f rx
    #+END_SRC
   
** Broadcast and Multicast
*** Prepare Vale

    #+BEGIN_SRC sh
      vale-ctl -n v1p1
      vale-ctl -n v1p2
      vale-ctl -n v1p3
      vale-ctl -a vale1:v1p1
      vale-ctl -a vale1:v1p2
      vale-ctl -a vale1:v1p3
      pkt-gen -i vale1:v1p1 -S 51:ec:30:31:bd:6c -f tx
      pkt-gen -i vale1:v1p2 -S b3:07:df:ed:04:86 -f tx
      pkt-gen -i vale1:v1p3 -S 45:d2:0e:93:c8:1b -f tx
    #+END_SRC

*** Send Broadcast
    #+BEGIN_SRC sh
      pkt-gen -i vale1:v1p1 -D ff:ff:ff:ff:ff:ff -f tx
    #+END_SRC

    The broadcast traffic can be received by all vale ports:
    #+BEGIN_SRC sh
      pkt-gen -i vale1:v1p3 -f rx -X
    #+END_SRC
*** Send Multicast
    #+BEGIN_SRC sh
      pkt-gen -i vale1:v1p1 -S 51:ec:30:31:bd:6c -D b3:07:df:ed:04:86 -f tx
    #+END_SRC

    The multicast traffic can be received by all vale ports:
    #+BEGIN_SRC sh
      pkt-gen -i vale1:v1p3 -f rx -X
    #+END_SRC

* Netmap Max Vale

  The default vale max number is 8. In one vale, the max port number
  is 254.

** Value Test Script

   =vale-test=:
   #+BEGIN_SRC sh
     #!/bin/bash
     # file: vale-test
     action=${1:-attach}
     shift
     vmax=${1:-1}
     shift
     pmax=${1:-252}
     shift
     for ((j=0; j<$vmax; j++)); do
         for ((i=0; i<$pmax; i++)); do
             p=$(printf "p%03d%03d" $j $i)
             v=$(printf "vale%03d" $j)
             echo $v:$p
             if [ "$action" = "attach" ]; then
                 vale-ctl -n $p
                 vale-ctl -a $v:$p
             else
                 vale-ctl -d $v:$p
                 vale-ctl -r $p
             fi
         done
     done
   #+END_SRC

** Test Vale Port Number  

   Attach 254 ports in 1 vale:
   #+BEGIN_SRC sh
     vale-test attach 1 254
   #+END_SRC

   Detach them:

   #+BEGIN_SRC sh
     vale-test detach 1 254
   #+END_SRC

** Test Vale Number   

   Create 8 ports and attach 1 port for each:
   #+BEGIN_SRC sh
     vale-test attach 8 1
   #+END_SRC

   Detach them:
   #+BEGIN_SRC sh
     vale-test detach 8 1
   #+END_SRC

* Netmap App Programming   

** Netmap APIs

** Sample: Nmpingd
